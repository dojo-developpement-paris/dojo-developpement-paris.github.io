#!/usr/bin/env sh

if has cachix; then
    cachix use pinage404-nix-sandboxes
fi

if has git; then
    git add --intent-to-add ./flake.nix ./flake.lock ./rust-toolchain.toml

    export GIT_CONFIG_COUNT=1
    export GIT_CONFIG_KEY_0="core.hooksPath"
    export GIT_CONFIG_VALUE_0="${PWD}/.config/git/hooks"
    export MASKFILE="${PWD}/maskfile.md"

    chmod +x "${GIT_CONFIG_VALUE_0}"/*
fi

strict_env

export NIX_USER_CONF_FILES=".config/nix/nix.conf${NIX_USER_CONF_FILES:+:$NIX_USER_CONF_FILES}"
use flake

# the following command break starting from Rust's channel 1.81.0
# eval "$(devbox generate direnv --print-envrc)"
# without Devbox, the PATH contains GCC wrapper 13.3.0
# /nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0/bin
# with Devbox, the PATH GCC wrapper 12.3.0 takes precedence
# /nix/store/zlzz2z48s7ry0hkl55xiqp5a73b4mzrg-gcc-wrapper-12.3.0/bin
# the previous command to the same as the following but without `--omit-nix-dev`
# `--omit-nix-dev` seems to just remove the bad GCC wrapper
# this seems enougth to be able to use Rust 1.81.0 and abose with Devbox
# see the following issue
# https://github.com/jetify-com/devbox/issues/2420
use_devbox() {
    watch_file devbox.json devbox.lock
    eval "$(devbox shellenv --init-hook --install --no-refresh-alias --omit-nix-env)"
}
use devbox

RUST_VERSION="$(grep 'channel' ./rust-toolchain.toml | grep -o '[0-9]\+\.[0-9]\+')"
rustup show active-toolchain >/dev/null || rustup toolchain install "$RUST_VERSION"

export GAMBLE_TEST_COMMAND="mask test"
